{
  
    
        "post0": {
            "title": "Indian Ethnicity Classifier using Deep Learning",
            "content": "First we have to import the libraries needed for this project. Here we are using fast AI which is based on Pytorch . Importing Fast AI . from fastbook import * from fastai.vision.widgets import * . Using Bing Api to download images . To download images with Bing Image Search , sign up at Microsoft Azure for a free account. You will be given a key, which you can copy and enter in a cell as follows (replacing &#39;XXX&#39; with your key and executing it): . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;XXX&#39;) . We could use this function by providing maximum images to download and the end point of the API . def search_images_bing(key, term, max_images: int = 100, **kwargs): params = {&#39;q&#39;:term, &#39;count&#39;:max_images} headers = {&quot;Ocp-Apim-Subscription-Key&quot;:key} search_url = &quot;https://api.bing.microsoft.com/v7.0/images/search&quot; response = requests.get(search_url, headers=headers, params=params) response.raise_for_status() search_results = response.json() return L(search_results[&#39;value&#39;]) . As almost all indians are from these three ethnicities . ethnicGroups = &#39;indo-aryan&#39;,&#39;dravidian&#39;,&#39;indian mongloid&#39; path = Path(&#39;ethnicGroups&#39;) . Now we are using Fast AI download_images function to download images to the path provided . if not path.exists(): path.mkdir() for o in ethnicGroups: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} people&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . Download of https://atlanblackhouse.files.wordpress.com/2016/07/nazis-greek-olympics-indo-aryan-people.png has failed after 5 retries Fix the download manually: $ mkdir -p ethnicGroups/indo-aryan $ cd ethnicGroups/indo-aryan $ wget -c https://atlanblackhouse.files.wordpress.com/2016/07/nazis-greek-olympics-indo-aryan-people.png $ tar xf nazis-greek-olympics-indo-aryan-people.png And re-run your code once the download is successful . Download of https://blackhistory938.files.wordpress.com/2017/12/the-other_home-of-subcultures-and-style-documentary_india-masquerade-gods-yannick-cormier_14.jpg has failed after 5 retries Fix the download manually: $ mkdir -p ethnicGroups/dravidian $ cd ethnicGroups/dravidian $ wget -c https://blackhistory938.files.wordpress.com/2017/12/the-other_home-of-subcultures-and-style-documentary_india-masquerade-gods-yannick-cormier_14.jpg $ tar xf the-other_home-of-subcultures-and-style-documentary_india-masquerade-gods-yannick-cormier_14.jpg And re-run your code once the download is successful . Now we check the images . fns = get_image_files(path) fns . (#424) [Path(&#39;ethnicGroups/dravidian/00000000.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000039.png&#39;),Path(&#39;ethnicGroups/dravidian/00000001.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000002.JPG&#39;),Path(&#39;ethnicGroups/dravidian/00000002.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000003.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000004.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000005.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000006.jpg&#39;),Path(&#39;ethnicGroups/dravidian/00000062.PNG&#39;)...] . Now we have to check corrupt images . failed = verify_images(fns) failed . (#3) [Path(&#39;ethnicGroups/dravidian/00000007.jpg&#39;),Path(&#39;ethnicGroups/indian mongloid/00000071.jpg&#39;),Path(&#39;ethnicGroups/indo-aryan/00000080.png&#39;)] . Delete the images with unlink function . failed.map(Path.unlink); . Now we have to make a dataloader. . DataLoader : DataLoaders: A fastai class that stores multiple DataLoader objects you pass to it, normally a train and a valid, although it&#39;s possible to have as many as you like. The first two are made available as properties. . [^1] Definition from Jeremy Book &quot;Deep Learning for coders&quot;. . groups = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=45), get_y=parent_label, item_tfms=Resize(128)) . dls = groups.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . As we can see above the images are not correct so we have to clean our image dataset. If you could manually get some image dataset the result would be so much better. . We are using data augmentation for better accuracy. Data augmentation refers to creating random variations of our input data, such that they appear different, but do not actually change the meaning of the data. Examples of common data augmentation techniques for images are rotation, flipping, perspective warping, brightness changes and contrast changes [^1] Definition from Jeremy Book &quot;Deep Learning for coders&quot;.* . groups = groups.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = groups.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . Now using bigger size image for better result. . groups = groups.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = groups.dataloaders(path) . Now using transfer learning technique in resnet18 architecture With fast AI we are using so much less lines of code. . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.708008 | 0.922546 | 0.357143 | 00:05 | . epoch train_loss valid_loss error_rate time . 0 | 1.080864 | 0.907514 | 0.392857 | 00:06 | . 1 | 0.966108 | 0.896233 | 0.333333 | 00:06 | . 2 | 0.899231 | 0.951731 | 0.333333 | 00:06 | . 3 | 0.833207 | 0.921495 | 0.321429 | 00:06 | . The accuracy is not great the error rate is around 32 % but we will clean aur data and get better results . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . These images are some of the examples of bad results. . interp.plot_top_losses(5, nrows=1) . With the help of fast AI functions we would clean our dataset . cleaner = ImageClassifierCleaner(learn) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Now we will re train our model with new dataset. . groups = groups.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = groups.dataloaders(path) . As we could see our accuracy has very much increased and error rate is dropped to 23% . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.801849 | 2.149620 | 0.526316 | 00:04 | . epoch train_loss valid_loss error_rate time . 0 | 1.326655 | 1.366351 | 0.473684 | 00:05 | . 1 | 1.124967 | 0.936145 | 0.302632 | 00:05 | . 2 | 0.983991 | 0.811113 | 0.236842 | 00:05 | . 3 | 0.864988 | 0.783508 | 0.236842 | 00:05 | . Now we export our model for use . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . We will create a GUI for a small application to use this model on Notebook with the help of IPython widgets (ipywidgets) and Voil&#224; . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {100* probs[pred_idx]:.02f}%&#39; btn_run.on_click(on_click_classify) . With the help of IPython widgets we made a simple gui to implement our result when we click on upload a box will appear to input image and when we press classify it prints our result . VBox([widgets.Label(&#39;Select image to check ethnicity!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://bilalhaider10.github.io/firstBlog/2021/01/24/My-First-blog.html",
            "relUrl": "/2021/01/24/My-First-blog.html",
            "date": " • Jan 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bilalhaider10.github.io/firstBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "ghtop redux",
            "content": ". Introduction . We recently refactored the CLI tool ghtop, created by the CEO of GitHub, Nat Friedman. Nat even described our refactor as a “tour de force”. This post describes what we learned along the way. . Motivation . Recently, we released ghapi, a new python client for the GitHub API. ghapi provides unparalleled ease of access to the GitHub api, as well as utilities for interacting with GitHub Actions. Part of our motivation for creating ghapi was to accelerate the development of build, testing and deployment tools that help us in maintaining fastai projects. . We recently started using GitHub Actions to perform a wide variety of tasks automatically like: unit and integration tests, deploying documentation, building Docker containers and Conda packages, sharing releases on Twitter, and much more. This automation is key to maintaining the vast open source fastai ecosystem with very few maintainers. . Since ghapi is central to so many of these tasks, we wanted to stress-test its efficacy against other projects. That’s when we found ghtop. This tool allows you to stream all the public events happening on GitHub to a CLI dashboard. We thought it would be a fun learning experience to refactor this code base with various fastai tools such as ghapi and fastcore, but also try out new libraries like rich. . Features we added to our tools . While exploring ghtop, we added several features to various fastai tools that we found to be generally useful. . ghapi Authentication . We added the function github_auth_device which allows users to authenticate their api client with GitHub interactively in a browser. When we call this function we get the following prompt: . github_auth_device() . First copy your one-time code: 276E-C910 Then visit https://github.com/login/device in your browser, and paste the code when prompted. Shall we try to open the link for you? [y/n] . The browser opens a window that looks like this: . . The function then returns an authenticated token which you can use for various tasks. While this is not the only way to create a token, this is a user friendly way to create a token, especially for those who are not as familiar with GitHub. . ghapi Events . As a result of our explorations with ghtop, we added an event module to ghapi. This is useful for retrieving and inspecting sample events. Inspecting sample events is important as it allows you to prototype GitHub Actions workflows locally. You can sample real events with load_sample_events: . from ghapi.event import load_sample_events evts = load_sample_events() . Individual events are formatted as markdown lists to be human readable in Jupyter: . print(evts[0]) . - id: 14517925737 - type: PushEvent - actor: - id: 17030246 - login: BeckhamL - display_login: BeckhamL - gravatar_id: - url: https://api.github.com/users/BeckhamL - avatar_url: https://avatars.githubusercontent.com/u/17030246? - repo: - id: 154349747 - name: BeckhamL/leetcode - url: https://api.github.com/repos/BeckhamL/leetcode - payload: - push_id: 6194986903 - size: 1 - distinct_size: 1 - ref: refs/heads/master - head: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - before: cb16921949c969b5153a0c23ce8fe516d2c8d773 - commits: - - sha: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - author: - email: beckham.lam@mail.mcgill.ca - name: Beckham Lam - message: Create detectCapital.ts - distinct: True - url: https://api.github.com/repos/BeckhamL/leetcode/commits/2055b0fcf22f1c3543e38b60199f6882266d32a5 - public: True - created_at: 2020-12-13T21:32:34Z . You can also inspect the json data in an event, which are accessible as attributes: . evts[0].type . &#39;PushEvent&#39; . For example, here is the frequency of all full_types in the sample: . x,y = zip(*Counter([o.full_type for o in evts]).most_common()) plt.figure(figsize=(8, 6)) plt.barh(x[::-1],y[::-1]); . We can fetch public events in parallel with GhApi.list_events_parallel. In our experiments, repeatedly calling list_events_parallel is fast enough to fetch all current public activity from all users across the entire GitHub platform. We use this for ghtop. Behind the scenes, list_events_parallel uses Python&#39;s ThreadPoolExecutor to fetch events in parallel - no fancy distributed systems or complicated infrastructure necessary, even at the scale of GitHub! . %time api = GhApi() evts = api.list_events_parallel() len(evts) . CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 4.29 µs . 240 . Note that the GitHub API is stateless, so successive calls to the API will likely return events already seen. We handle this by using a set operations to filter out events already seen. . ghapi pagination . One of the most cumbersome aspects of fetching lots of data from the GitHub api can be pagination. As mentioned in the documentation, different endpoints have different pagination rules and defaults. Therefore, many api clients offer clunky or incomplete interfaces for pagination. . In ghapi we added an entire module with various tools to make paging easier. Below is an example for retrieving repos for the github org. Without pagination, we can only retrieve a fixed number at a time (by default 30): . api = GhApi() repos = api.repos.list_for_org(&#39;fastai&#39;) len(repos) . 30 . However, to get more we can paginate through paged: . from ghapi.event import paged repos = paged(api.repos.list_for_org, &#39;fastai&#39;) for page in repos: print(len(page), page[0].name) . 30 fast-image 30 fastforest 30 .github 8 tweetrel . You can learn more about this functionality by reading the docs. . fastcore Sparklines . Part of goals for refactoring ghtop were to introduce cool visualizations in the terminal of data. We drew inspiration from projects like bashtop, which have CLI interfaces that look like this: . Concretely, we really liked the idea of sparklines in the terminal. Therefore, we created the ability to show sparklines with fastcore: . from fastcore.utils import sparkline data = [9,6,None,1,4,0,8,15,10] print(f&#39;without &quot;empty_zero&quot;: {sparkline(data, empty_zero=False)}&#39;) print(f&#39; with &quot;empty_zero&quot;: {sparkline(data, empty_zero=True )}&#39;) . without &#34;empty_zero&#34;: ▅▂ ▁▂▁▃▇▅ with &#34;empty_zero&#34;: ▅▂ ▁▂ ▃▇▅ . For more information on this function, read the docs. Later in this post, we will describe how we used Rich to add color and animation to these sparklines. . fastcore EventTimer . Because we wanted streaming event data to automatically populate sparklines, we created EventTimer that constructs a histogram according to a frequency and time span you set. With EventTimer, you can add events with add, and get the number of events and their frequency: . from fastcore.utils import EventTimer from time import sleep import random def _randwait(): yield from (sleep(random.random()/200) for _ in range(100)) c = EventTimer(store=5, span=0.03) for o in _randwait(): c.add(1) print(f&#39;Num Events: {c.events}, Freq/sec: {c.freq:.01f}&#39;) print(&#39;Most recent: &#39;, sparkline(c.hist), *L(c.hist).map(&#39;{:.01f}&#39;)) . Num Events: 6, Freq/sec: 301.1 Most recent: ▃▁▁▇▁ 323.6 274.8 291.3 390.9 283.6 . For more information, see the docs. . CLI Animations With Rich . Rich is an amazing python library that allows you to create beautiful, animated and interactive CLI interfaces. Below is a preview of some its features: . Rich also offers animated elements like spinners: . ... and progress bars: . While this post is not about rich, we highly recommend visiting the repo and the docs to learn more. Rich allows you to create your own custom elements. We created two custom elements - Stats and FixedPanel, which we describe below: . Stats: Sparklines with metrics . Stats renders a group of sparklines along with a spinner and a progress bar. First we define our sparklines, the last argument being a list of event types to count: . from ghtop.richext import * from ghtop.all_rich import * console = Console() s1 = ESpark(&#39;Issues&#39;, &#39;green&#39;, [IssueCommentEvent, IssuesEvent]) s2 = ESpark(&#39;PR&#39;, &#39;red&#39;, [PullRequestEvent, PullRequestReviewCommentEvent, PullRequestReviewEvent]) s3 = ESpark(&#39;Follow&#39;, &#39;blue&#39;, [WatchEvent, StarEvent]) s4 = ESpark(&#39;Other&#39;, &#39;red&#39;) s = Stats([s1,s2,s3,s4], store=5, span=.1, stacked=True) console.print(s) . 🌍 Issues PR Follow Other Quota /min 0.0 0.0 0.0 0.0 ━━━━━━━ 0% . You can add events to update counters and sparklines with add_events: . evts = load_sample_events() s.add_events(evts) console.print(s) . 🌍 Issues PR Follow Other Quota /min 11772 ▁▇ 16546 ▁▇ 5991 ▁▇ 6484 ▁ ━━━━━━━ 0% . You can update the progress bar with the update_prog method: . s.update_prog(50) console.print(s) . 🌍 Issues PR Follow Other Quota /min 4076 ▁▇ 5408 ▁▇ 1834 ▁▇ 5998 ▁ ━━━╸━━━ 50% . Here is what the animated version looks like: . . FixedPanel: A panel with fixed height . A key aspect of ghtop is showing events in different panels. We created FixedPanel to allow us to arrange panels in a grid that we can incrementally add events to: . p = FixedPanel(15, box=box.HORIZONTALS, title=&#39;ghtop&#39;) for e in evts: p.append(e) grid([[p,p]]) . ─────────────────── ghtop ─────────────────── ────────────────── ghtop ─────────────────── 📪 dependabo…closed PR #3 o…herzli…&quot;Bump … 📪 dependabo…closed PR #3 …herzli…&quot;Bump … ⭐ dongjun13 pushed 1 commi…dongjun13/2 ⭐ dongjun13 pushed 1 comm…dongjun13/2 ⭐ admmonito…pushed 1 commi…admmonitors/t… ⭐ admmonito…pushed 1 comm…admmonitors/t… ⭐ randomper…pushed 1 commi…randomperson1… ⭐ randomper…pushed 1 comm…randomperson1… ⭐ ahocevar pushed 6 commi…openlayers/ope… ⭐ ahocevar pushed 6 commi…openlayers/op… 🏭 arjmoto created branch …arjmoto/redux-… 🏭 arjmoto created branch…arjmoto/redux-… 💬 stale[bot…created commen…ironha…&quot;This … 💬 stale[bot…created comme…ironha…&quot;This … ⭐ commit-b0…pushed 1 commi…commit-b0t/co… ⭐ commit-b0…pushed 1 comm…commit-b0t/co… ⭐ yakirgot pushed 2 commi…yakirgot/snake ⭐ yakirgot pushed 2 commi…yakirgot/snake 💬 awolf78 created comment…Impulse…&quot;If yo… 💬 awolf78 created commen…Impulse…&quot;If yo… ⭐ kreus7 pushed 1 commit…kreus7/kreusada… ⭐ kreus7 pushed 1 commit…kreus7/kreusad… ⭐ rgripper pushed 1 commi…rgripper/webco… ⭐ rgripper pushed 1 commi…rgripper/webc… 👀 thelittle…started watchi…ritchie46/pol… 👀 thelittle…started watch…ritchie46/pol… 🏭 adrian698 created branch…adrian698/Test 🏭 adrian698 created branc…adrian698/Test ⭐ mergify[b…pushed 2 commi…spbu-coding/6… ⭐ mergify[b…pushed 2 comm…spbu-coding/6… ───────────────────────────────────────────── ──────────────────────────────────────────── . To learn more about our extensions to rich see these docs. . A demo of ghtop animations . Putting all of this together, we get the following results: . 4 Panels with a sparkline for different types of events: . . single panel with a sparkline . . To learn more about ghtop, see the docs. . Interesting python features used . While making these docs, we used the following python features that at least one person we demoed it to found interesting or didn&#39;t know about. If you have been using python for sometime, you might know about all or most of these features: . yield from . Generators are a powerful feature of python, which are especially useful for iterating through large datasets lazily. . dequeue . f-strings .",
            "url": "https://bilalhaider10.github.io/firstBlog/ghtop",
            "relUrl": "/ghtop",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Best Neighbourhood in Your Budget",
            "content": "Buying a perfect home is a dream for each an every individual. We have been always trying to buy the home which would be perfect for us. For years property consultants and brokers are the people who have helped us in our endeavour. . Now with the addition of new technologies stakeholders have changed their methods to improve their services and in this IT age with the help of technology and data they are trying their best to achieve better results. . So I have decided in my project to make something useful for all the buyers as well the stakeholders in this business. I am using Toronto City data but this project could be expanded to other metropolitan cities as well. . Click here to open notebook in binder Make sure to make notebook trusted to display map . I am using Foursquare API as well as scraped webpages to get the average property cost in each and every area of Toronto City. As we know cost is the major driver where a person may live. Foursquare API would be used to get the locality of an area. The locality and venues would be helpful for individual looking to get the best place he needs. For example A bachelor would like to live where there is nearby pubs, entertainment centres and work places. But a person having a family may wants to live where there is nearby schools, shops and parks. . Data Section . We are using FourSquare API, Geocoders, and web Scraping techniques to solve our problem. . FourSquare API would be used to get nearby venues around a location. This venue data would be used to classify our neighbourhood based on the locality. . Geocoders would be used to get latitude and longitude of neighbourhoods. This latitude and longitude is required for maps and FourSquare API. . I searched but couldn&#39;t find any structured dataset to get average housing cost in a neighborhood. So I scraped a webpage which shows the average housing cost of a neighborhood. Click here to view webpage . import requests import pandas as pd from geopy.geocoders import Nominatim from IPython.display import HTML, IFrame url = &#39;https://www.moneysense.ca/spend/real-estate/where-to-buy-real-estate-in-2020-city-of-toronto/&#39; header = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36&quot;, &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot; } r = requests.get(url, headers=header) . dfs = pd.read_html(r.text) df=dfs[0] . df . Rank Area Province Neighbourhood Area average price 2019 Value Momentum Average price vs. area Average price vs. metro district Average price vs. greater city area 1-Year price change 5-Year price change Final star rating . 0 1 | Toronto W06 | ON | Alderwood | $1,012,359 | 68.23 | 98.32 | 150.4% | 128.8% | 120.0% | 65.4% | 97.7% | ★★★★ | . 1 2 | Toronto C08 | ON | Moss Park | $1,509,796 | 50.49 | 99.43 | 173.5% | 221.6% | 206.5% | 80.9% | 98.2% | ★★★★ | . 2 3 | Toronto E01 | ON | Blake-Jones | $1,241,262 | 60.86 | 92.39 | 117.9% | 123.8% | 115.4% | 45.6% | 94.6% | ★★★ | . 3 4 | Toronto C10 | ON | Mount Pleasant East | $1,594,740 | 51.87 | 94.85 | 137.5% | 185.5% | 172.9% | 37.7% | 95.1% | ★★★★ | . 4 5 | Toronto C02 | ON | Yonge-St. Clair | $2,095,964 | 47.70 | 86.82 | 159.7% | 283.3% | 263.9% | 19.5% | 87.7% | ★★★★★ | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 136 137 | Toronto C01 | ON | Waterfront Communities C1 | $1,648,312 | (22.35) | 0.00 | 0.0% | 0.0% | 0.0% | 0 | 0.0% | ★★★ | . 137 138 | Toronto C08 | ON | Waterfront Communities C8 | $1,509,796 | (22.35) | 0.00 | 0.0% | 0.0% | 0.0% | 0 | 0.0% | ★★★ | . 138 139 | Toronto W04 | ON | Weston | $850,365 | (22.35) | 0.26 | 0.0% | 0.0% | 0.0% | -100.0% | 0.3% | ★★ | . 139 140 | Toronto C08 | ON | North St. James Town | $1,509,796 | (22.35) | 0.00 | 0.0% | 0.0% | 0.0% | 0 | 0.0% | ★★ | . 140 141 | Toronto W10 | ON | Mount Olive-Silverstone-Jamestown | $739,999 | (22.35) | 0.11 | 0.0% | 0.0% | 0.0% | 0 | 0.3% | ★★ | . 141 rows × 13 columns . Data Cleaning . We are only interested in Area, Neighbourhood and Area average price. Hence we would drop other columns . df=df.filter(items=[&#39;Area&#39;,&#39;Neighbourhood&#39;,&#39;Area average price 2019&#39;]) df . Area Neighbourhood Area average price 2019 . 0 Toronto W06 | Alderwood | $1,012,359 | . 1 Toronto C08 | Moss Park | $1,509,796 | . 2 Toronto E01 | Blake-Jones | $1,241,262 | . 3 Toronto C10 | Mount Pleasant East | $1,594,740 | . 4 Toronto C02 | Yonge-St. Clair | $2,095,964 | . ... ... | ... | ... | . 136 Toronto C01 | Waterfront Communities C1 | $1,648,312 | . 137 Toronto C08 | Waterfront Communities C8 | $1,509,796 | . 138 Toronto W04 | Weston | $850,365 | . 139 Toronto C08 | North St. James Town | $1,509,796 | . 140 Toronto W10 | Mount Olive-Silverstone-Jamestown | $739,999 | . 141 rows × 3 columns . The average price is in object type hence it needs to be converted to float . df[df.columns[2]] = df[df.columns[2]].replace(&#39;[ $,]&#39;, &#39;&#39;, regex=True).astype(float) . df . Area Neighbourhood Area average price 2019 . 0 Toronto W06 | Alderwood | 1012359.0 | . 1 Toronto C08 | Moss Park | 1509796.0 | . 2 Toronto E01 | Blake-Jones | 1241262.0 | . 3 Toronto C10 | Mount Pleasant East | 1594740.0 | . 4 Toronto C02 | Yonge-St. Clair | 2095964.0 | . ... ... | ... | ... | . 136 Toronto C01 | Waterfront Communities C1 | 1648312.0 | . 137 Toronto C08 | Waterfront Communities C8 | 1509796.0 | . 138 Toronto W04 | Weston | 850365.0 | . 139 Toronto C08 | North St. James Town | 1509796.0 | . 140 Toronto W10 | Mount Olive-Silverstone-Jamestown | 739999.0 | . 141 rows × 3 columns . Using geocode to get latitude and longitude of a neighbourhood . # place=place+ &#39; Toronto&#39; # place index=0 latitude=[] longitude=[] geolocator = Nominatim(user_agent=&quot;toronto&quot;) for i in df[&#39;Neighbourhood&#39;].iteritems(): address = i[1] + &#39; Toronto&#39; location = geolocator.geocode(address) if(location is None): df.drop([index],inplace=True) index=index+1 continue lat = location.latitude long = location.longitude index=index+1 latitude.append(lat) longitude.append(long) . df[&#39;Latitude&#39;]=latitude df[&#39;Longitude&#39;]=longitude . Now we will visualize our Data . df_price=df[[&#39;Neighbourhood&#39;,&#39;Area average price 2019&#39;]] df_price.set_index(&#39;Neighbourhood&#39;,inplace=True) . %matplotlib inline import matplotlib as mpl import matplotlib.pyplot as plt import matplotlib.cm as cm import matplotlib.colors as colors mpl.style.use(&#39;ggplot&#39;) # optional: for ggplot-like style # check for latest version of Matplotlib print (&#39;Matplotlib version: &#39;, mpl.__version__) # &gt;= 2.0.0 . Matplotlib version: 3.1.3 . df_price.plot(kind=&#39;hist&#39;,figsize=(16,8),color=&#39;grey&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x195544e96c8&gt; . df_price.plot(kind=&#39;bar&#39;,figsize=(16,8)) plt.title(&quot;Price Distribution by Neigbourhood&quot;) plt.ylabel(&#39;Price in $&#39;) . Text(0, 0.5, &#39;Price in $&#39;) . df_price.describe() . Area average price 2019 . count 1.100000e+02 | . mean 1.220273e+06 | . std 4.243845e+05 | . min 7.222090e+05 | . 25% 8.453160e+05 | . 50% 1.184223e+06 | . 75% 1.526647e+06 | . max 3.008096e+06 | . df_price.plot(kind=&#39;box&#39;,figsize=(10,7),color=&#39;blue&#39;) plt.title(&quot;Price Distribution&quot;) plt.ylabel(&#39;Price in $&#39;) . Text(0, 0.5, &#39;Price in $&#39;) . Now we are using folium to demonstrate the data points on map with labels demonstrating average price and neighborhood . import folium location = geolocator.geocode(&#39;Toronto&#39;) latitude = location.latitude longitude = location.longitude # create map of New York using latitude and longitude values map_toronto = folium.Map(location=[latitude, longitude], zoom_start=10) # add markers to map for lat, lng, neighbourhood,price in zip(df[&#39;Latitude&#39;], df[&#39;Longitude&#39;], df[&#39;Neighborhood&#39;],df[&#39;Area average price 2019&#39;]): label = &#39;{}, {}&#39;.format(neighbourhood,price ) label = folium.Popup(label, parse_html=True) folium.CircleMarker( [lat, lng], radius=5, popup=label, color=&#39;blue&#39;, fill=True, fill_color=&#39;#3186cc&#39;, fill_opacity=0.7, parse_html=False).add_to(map_toronto) map_toronto.save(&#39;map_toronto.html&#39;) . Now we will use FourSquare API to get nearby venues . df_new=df_price.reset_index() df_new . Neighbourhood Area average price 2019 . 0 Alderwood | 1012359.0 | . 1 Moss Park | 1509796.0 | . 2 Mount Pleasant East | 1594740.0 | . 3 Yonge-St. Clair | 2095964.0 | . 4 Wychwood | 2095964.0 | . ... ... | ... | . 105 Highland Creek | 790226.0 | . 106 Morningside | 727426.0 | . 107 Elms-Old Rexdale | 739999.0 | . 108 Weston | 850365.0 | . 109 North St. James Town | 1509796.0 | . 110 rows × 2 columns . geo = &#39;toronto_crs84.geojson&#39; # geojson file # create a plain world map map1 = folium.Map(location=[43.718432, -79.333204], zoom_start=11) . map1.choropleth( geo_data=geo, data=df_new, columns=[&#39;Neighbourhood&#39;, &#39;Area average price 2019&#39;], key_on=&#39;feature.properties.AREA_NAME&#39;, fill_color=&#39;YlOrRd&#39;, fill_opacity=0.7, line_opacity=0.2, legend_name=&#39;Average Price in Toronto&#39;, ) map1.save(&#39;map1.html&#39;) . CLIENT_ID = &#39;XXX&#39; # your Foursquare ID CLIENT_SECRET = &#39;XXX&#39; # your Foursquare Secret ACCESS_TOKEN = &#39;XXX&#39; # your FourSquare Access Token VERSION = &#39;20180604&#39; LIMIT = 100 # A default Foursquare API limit value . Function to extract useful response . def get_category_type(row): try: categories_list = row[&#39;categories&#39;] except: categories_list = row[&#39;venue.categories&#39;] if len(categories_list) == 0: return None else: return categories_list[0][&#39;name&#39;] . Getting nearby venues from each neighbourhood . def getNearbyVenues(names, latitudes, longitudes, radius=500): venues_list=[] for name, lat, lng in zip(names, latitudes, longitudes): print(name) # create the API request URL url = &#39;https://api.foursquare.com/v2/venues/explore?&amp;client_id={}&amp;client_secret={}&amp;v={}&amp;ll={},{}&amp;radius={}&amp;limit={}&#39;.format( CLIENT_ID, CLIENT_SECRET, VERSION, lat, lng, radius, LIMIT) # make the GET request results = requests.get(url).json()[&quot;response&quot;][&#39;groups&#39;][0][&#39;items&#39;] # return only relevant information for each nearby venue venues_list.append([( name, lat, lng, v[&#39;venue&#39;][&#39;name&#39;], v[&#39;venue&#39;][&#39;location&#39;][&#39;lat&#39;], v[&#39;venue&#39;][&#39;location&#39;][&#39;lng&#39;], v[&#39;venue&#39;][&#39;categories&#39;][0][&#39;name&#39;]) for v in results]) nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list]) nearby_venues.columns = [&#39;Neighborhood&#39;, &#39;Neighborhood Latitude&#39;, &#39;Neighborhood Longitude&#39;, &#39;Venue&#39;, &#39;Venue Latitude&#39;, &#39;Venue Longitude&#39;, &#39;Venue Category&#39;] return(nearby_venues) . df.rename(columns={&quot;Neighbourhood&quot;:&quot;Neighborhood&quot;},inplace=True) . toronto_venues = getNearbyVenues(names=df[&#39;Neighborhood&#39;], latitudes=df[&#39;Latitude&#39;], longitudes=df[&#39;Longitude&#39;] ) . Alderwood Moss Park Mount Pleasant East Yonge-St. Clair Wychwood Crescent Town Lawrence Park North Oakwood-Vaughan Rosedale-Moore Park West Hill Trinity-Bellwoods Yonge-Eglinton Palmerston-Little Italy New Toronto Annex Rouge E11 East End-Danforth York University Heights Little Portugal Roncesvalles Humber Summit Kennedy Park Malvern Keelesdale-Eglinton West Mount Pleasant West Glenfield-Jane Heights Banbury-Don Mills Mimico Hillcrest Village Dufferin Grove Bendale Corso Italia-Davenport Victoria Village Broadview North Oakridge High Park North Danforth Village-East York Black Creek Rouge E10 North Riverdale Mount Dennis The Beaches Ionview High Park-Swansea South Riverdale Casa Loma Runnymede-Bloor West Village West Humber-Clairville Dovercourt-Wallace Emerson-Junction Leaside Tam O&#39;Shanter-Sullivan Newtonbrook West Lawrence Park South Pleasant View Agincourt North Playter Estates-Danforth Thistletown-Beaumonde Heights Danforth East York Long Branch Humewood-Cedarvale Centennial Scarborough Dorset Park Don Valley Village Bayview Woods-Steeles Junction Area Woburn University Milliken L&#39;Amoreaux Cabbagetown-South St. James Town Maple Leaf Guildwood Rustic Church-Yonge Corridor Forest Hill South Forest Hill North Kingsway South Flemingdon Park Islington-City Centre West Bayview Village Regent Park Willowdale West Stonegate-Queensway Edenbridge-Humber Valley Englemount-Lawrence Newtonbrook East Etobicoke West Mall Markland Wood South Parkdale Willowdale East Niagara Bathurst Manor St. Andrew-Windfields Henry Farm Lansing-Westgate Humber Heights Clanton Park Yorkdale-Glen Park O&#39;Connor-Parkview Cliffcrest Scarborough Village Eglinton East Steeles Rexdale-Kipling Highland Creek Morningside Elms-Old Rexdale Weston North St. James Town . toronto_venues.head() . Neighborhood Neighborhood Latitude Neighborhood Longitude Venue Venue Latitude Venue Longitude Venue Category . 0 Alderwood | 43.601717 | -79.545232 | Il Paesano Pizzeria &amp; Restaurant | 43.601280 | -79.545028 | Pizza Place | . 1 Alderwood | 43.601717 | -79.545232 | Timothy&#39;s Pub | 43.600165 | -79.544699 | Pub | . 2 Alderwood | 43.601717 | -79.545232 | Toronto Gymnastics International | 43.599832 | -79.542924 | Gym | . 3 Alderwood | 43.601717 | -79.545232 | Tim Hortons | 43.602396 | -79.545048 | Coffee Shop | . 4 Alderwood | 43.601717 | -79.545232 | Pizza Pizza | 43.605340 | -79.547252 | Pizza Place | . Now getting the returned venues from each neighborhood. . toronto_venues.groupby(&#39;Neighborhood&#39;).count() . Neighborhood Latitude Neighborhood Longitude Venue Venue Latitude Venue Longitude Venue Category . Neighborhood . Agincourt North 24 | 24 | 24 | 24 | 24 | 24 | . Alderwood 5 | 5 | 5 | 5 | 5 | 5 | . Annex 39 | 39 | 39 | 39 | 39 | 39 | . Banbury-Don Mills 5 | 5 | 5 | 5 | 5 | 5 | . Bathurst Manor 70 | 70 | 70 | 70 | 70 | 70 | . ... ... | ... | ... | ... | ... | ... | . Wychwood 45 | 45 | 45 | 45 | 45 | 45 | . Yonge-Eglinton 72 | 72 | 72 | 72 | 72 | 72 | . Yonge-St. Clair 58 | 58 | 58 | 58 | 58 | 58 | . York University Heights 19 | 19 | 19 | 19 | 19 | 19 | . Yorkdale-Glen Park 11 | 11 | 11 | 11 | 11 | 11 | . 110 rows × 6 columns . print(&#39;There are {} uniques categories.&#39;.format(len(toronto_venues[&#39;Venue Category&#39;].unique()))) . There are 270 uniques categories. . Now we would use dummy variables to use our Model . # one hot encoding toronto_onehot = pd.get_dummies(toronto_venues[[&#39;Venue Category&#39;]], prefix=&quot;&quot;, prefix_sep=&quot;&quot;) # add neighborhood column back to dataframe toronto_onehot[&#39;Neighborhood&#39;] = toronto_venues[&#39;Neighborhood&#39;] # move neighborhood column to the first column fixed_columns = [toronto_onehot.columns[-1]] + list(toronto_onehot.columns[:-1]) toronto_onehot = toronto_onehot[fixed_columns] toronto_onehot.head() . Yoga Studio Accessories Store Adult Boutique African Restaurant American Restaurant Animal Shelter Antique Shop Argentinian Restaurant Art Gallery Art Museum ... Turkish Restaurant Vegetarian / Vegan Restaurant Video Game Store Video Store Vietnamese Restaurant Whisky Bar Wine Bar Wine Shop Wings Joint Women&#39;s Store . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 270 columns . toronto_onehot.shape . (2398, 270) . toronto_grouped = toronto_onehot.groupby(&#39;Neighborhood&#39;).mean().reset_index() # toronto_grouped =pd.merge(toronto_grouped,df2,on=&#39;Neighborhood&#39;) toronto_grouped . Neighborhood Yoga Studio Accessories Store Adult Boutique African Restaurant American Restaurant Animal Shelter Antique Shop Argentinian Restaurant Art Gallery ... Turkish Restaurant Vegetarian / Vegan Restaurant Video Game Store Video Store Vietnamese Restaurant Whisky Bar Wine Bar Wine Shop Wings Joint Women&#39;s Store . 0 Agincourt North | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.041667 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 1 Alderwood | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 2 Annex | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.025641 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.025641 | 0.0 | . 3 Banbury-Don Mills | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 4 Bathurst Manor | 0.000000 | 0.0 | 0.0 | 0.0 | 0.014286 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.014286 | 0.000000 | 0.028571 | 0.014286 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 105 Wychwood | 0.022222 | 0.0 | 0.0 | 0.0 | 0.022222 | 0.0 | 0.0 | 0.000000 | 0.022222 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 106 Yonge-Eglinton | 0.013889 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.013889 | 0.013889 | 0.000000 | 0.013889 | 0.0 | 0.013889 | 0.0 | 0.000000 | 0.0 | . 107 Yonge-St. Clair | 0.017241 | 0.0 | 0.0 | 0.0 | 0.017241 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.017241 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 108 York University Heights | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.052632 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 109 Yorkdale-Glen Park | 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.090909 | 0.000000 | ... | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | . 110 rows × 270 columns . Getting Most common Venues . def return_most_common_venues(row, num_top_venues): row_categories = row.iloc[1:] row_categories_sorted = row_categories.sort_values(ascending=False) return row_categories_sorted.index.values[0:num_top_venues] . import numpy as np num_top_venues = 10 indicators = [&#39;st&#39;, &#39;nd&#39;, &#39;rd&#39;] # create columns according to number of top venues columns = [&#39;Neighborhood&#39;] for ind in np.arange(num_top_venues): try: columns.append(&#39;{}{} Most Common Venue&#39;.format(ind+1, indicators[ind])) except: columns.append(&#39;{}th Most Common Venue&#39;.format(ind+1)) # create a new dataframe neighborhoods_venues_sorted = pd.DataFrame(columns=columns) neighborhoods_venues_sorted[&#39;Neighborhood&#39;] = toronto_grouped[&#39;Neighborhood&#39;] for ind in np.arange(toronto_grouped.shape[0]): neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues) neighborhoods_venues_sorted.head() . Neighborhood 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 0 Agincourt North | Bank | Chinese Restaurant | Coffee Shop | Fast Food Restaurant | Sandwich Place | Liquor Store | Spa | Movie Theater | Fried Chicken Joint | Frozen Yogurt Shop | . 1 Alderwood | Pizza Place | Coffee Shop | Gym | Pub | Field | Fast Food Restaurant | Farmers Market | Filipino Restaurant | Falafel Restaurant | Dumpling Restaurant | . 2 Annex | Pizza Place | Thai Restaurant | Gym | Bistro | Donut Shop | Diner | Sushi Restaurant | Korean Restaurant | Fried Chicken Joint | Bookstore | . 3 Banbury-Don Mills | Park | Intersection | Gas Station | Japanese Restaurant | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | . 4 Bathurst Manor | Korean Restaurant | Grocery Store | Coffee Shop | Eastern European Restaurant | Video Store | Ice Cream Shop | Café | Bar | Bakery | Mexican Restaurant | . Final Dataset Used for clustering . toronto_grouped=pd.merge(toronto_grouped,df,on=&#39;Neighborhood&#39;) toronto_grouped_clustering = toronto_grouped.drop([&#39;Neighborhood&#39;,&#39;Area&#39;],axis= 1) . toronto_grouped_clustering . Yoga Studio Accessories Store Adult Boutique African Restaurant American Restaurant Animal Shelter Antique Shop Argentinian Restaurant Art Gallery Art Museum ... Video Store Vietnamese Restaurant Whisky Bar Wine Bar Wine Shop Wings Joint Women&#39;s Store Area average price 2019 Latitude Longitude . 0 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.041667 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 831826.0 | 43.808038 | -79.266439 | . 1 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 1012359.0 | 43.601717 | -79.545232 | . 2 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.025641 | 0.0 | 2095964.0 | 43.670338 | -79.407117 | . 3 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 1187598.0 | 43.752683 | -79.365270 | . 4 0.000000 | 0.0 | 0.0 | 0.0 | 0.014286 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.028571 | 0.014286 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 1089948.0 | 43.665519 | -79.411937 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 105 0.022222 | 0.0 | 0.0 | 0.0 | 0.022222 | 0.0 | 0.0 | 0.000000 | 0.022222 | 0.0 | ... | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 2095964.0 | 43.682171 | -79.423113 | . 106 0.013889 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.013889 | 0.0 | 0.013889 | 0.0 | 0.000000 | 0.0 | 1672260.0 | 43.706748 | -79.398327 | . 107 0.017241 | 0.0 | 0.0 | 0.0 | 0.017241 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.017241 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 2095964.0 | 43.688078 | -79.394396 | . 108 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.0 | ... | 0.000000 | 0.052632 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 828052.0 | 43.758781 | -79.519434 | . 109 0.000000 | 0.0 | 0.0 | 0.0 | 0.000000 | 0.0 | 0.0 | 0.090909 | 0.000000 | 0.0 | ... | 0.000000 | 0.000000 | 0.0 | 0.000000 | 0.0 | 0.000000 | 0.0 | 850365.0 | 43.703434 | -79.452918 | . 110 rows × 272 columns . from sklearn.cluster import KMeans kclusters = 4 kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(toronto_grouped_clustering) # check cluster labels generated for each row in the dataframe kmeans.labels_[0:] . array([3, 1, 0, 1, 1, 1, 1, 3, 3, 1, 2, 0, 3, 2, 1, 3, 3, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 3, 3, 2, 1, 2, 2, 2, 3, 3, 1, 1, 2, 3, 1, 3, 3, 2, 3, 1, 1, 3, 3, 1, 3, 1, 2, 2, 2, 2, 1, 3, 3, 1, 3, 1, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 1, 3, 3, 2, 1, 0, 3, 1, 3, 1, 3, 2, 2, 1, 3, 3, 3, 2, 1, 3, 0, 2, 0, 3, 3]) . neighborhoods_venues_sorted.insert(0, &#39;Cluster Labels&#39;, kmeans.labels_) toronto_merged = df # merge manhattan_grouped with manhattan_data to add latitude/longitude for each neighborhood toronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index(&#39;Neighborhood&#39;), on=&#39;Neighborhood&#39;) toronto_merged.head() # check the last columns! . Area Neighborhood Area average price 2019 Latitude Longitude Cluster Labels 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 0 Toronto W06 | Alderwood | 1012359.0 | 43.601717 | -79.545232 | 1 | Pizza Place | Coffee Shop | Gym | Pub | Field | Fast Food Restaurant | Farmers Market | Filipino Restaurant | Falafel Restaurant | Dumpling Restaurant | . 1 Toronto C08 | Moss Park | 1509796.0 | 43.654644 | -79.369728 | 2 | Coffee Shop | Furniture / Home Store | Café | Italian Restaurant | Sandwich Place | Grocery Store | Diner | Food &amp; Drink Shop | Sushi Restaurant | Karaoke Bar | . 3 Toronto C10 | Mount Pleasant East | 1594740.0 | 43.708417 | -79.390135 | 2 | Dessert Shop | Coffee Shop | Pizza Place | Sandwich Place | Sushi Restaurant | Gym | Italian Restaurant | Café | Brewery | Supermarket | . 4 Toronto C02 | Yonge-St. Clair | 2095964.0 | 43.688078 | -79.394396 | 0 | Coffee Shop | Italian Restaurant | Grocery Store | Café | Thai Restaurant | Sushi Restaurant | Pizza Place | Bank | Restaurant | Sandwich Place | . 5 Toronto C02 | Wychwood | 2095964.0 | 43.682171 | -79.423113 | 0 | Coffee Shop | Ice Cream Shop | Restaurant | Sushi Restaurant | Pizza Place | Italian Restaurant | Bakery | Café | Convenience Store | Caribbean Restaurant | . map_clusters = folium.Map(location=[latitude, longitude], zoom_start=10) # set color scheme for the clusters x = np.arange(kclusters) ys = [i + x + (i*x)**2 for i in range(kclusters)] colors_array = cm.rainbow(np.linspace(0, 1, len(ys))) rainbow = [colors.rgb2hex(i) for i in colors_array] # add markers to the map markers_colors = [] for lat, lon, poi, cluster in zip(toronto_merged[&#39;Latitude&#39;], toronto_merged[&#39;Longitude&#39;], toronto_merged[&#39;Neighborhood&#39;], toronto_merged[&#39;Cluster Labels&#39;]): label = folium.Popup(str(poi) + &#39; Cluster &#39; + str(cluster), parse_html=True) folium.CircleMarker( [lat, lon], radius=5, popup=label, color=rainbow[cluster-1], fill=True, fill_color=rainbow[cluster-1], fill_opacity=0.7).add_to(map_clusters) map_clusters.save(&#39;map_cluster.html&#39;) . toronto_merged.loc[toronto_merged[&#39;Cluster Labels&#39;]==0] . Area Neighborhood Area average price 2019 Latitude Longitude Cluster Labels 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 4 Toronto C02 | Yonge-St. Clair | 2095964.0 | 43.688078 | -79.394396 | 0 | Coffee Shop | Italian Restaurant | Grocery Store | Café | Thai Restaurant | Sushi Restaurant | Pizza Place | Bank | Restaurant | Sandwich Place | . 5 Toronto C02 | Wychwood | 2095964.0 | 43.682171 | -79.423113 | 0 | Coffee Shop | Ice Cream Shop | Restaurant | Sushi Restaurant | Pizza Place | Italian Restaurant | Bakery | Café | Convenience Store | Caribbean Restaurant | . 9 Toronto C09 | Rosedale-Moore Park | 3008096.0 | 43.690388 | -79.383297 | 0 | Playground | Lawyer | Restaurant | Tennis Court | Gym | Women&#39;s Store | Event Space | Egyptian Restaurant | Electronics Store | Elementary School | . 16 Toronto C02 | Annex | 2095964.0 | 43.670338 | -79.407117 | 0 | Pizza Place | Thai Restaurant | Gym | Bistro | Donut Shop | Diner | Sushi Restaurant | Korean Restaurant | Fried Chicken Joint | Bookstore | . 63 Toronto C02 | Casa Loma | 2095964.0 | 43.678101 | -79.409416 | 0 | Sandwich Place | History Museum | Coffee Shop | Café | Pharmacy | Theater | Indian Restaurant | Liquor Store | Middle Eastern Restaurant | Modern European Restaurant | . 116 Toronto C12 | St. Andrew-Windfields | 2408769.0 | 43.647792 | -79.384871 | 0 | Coffee Shop | Café | Hotel | Asian Restaurant | Seafood Restaurant | American Restaurant | Gym | Taco Place | Sushi Restaurant | Restaurant | . toronto_merged.loc[toronto_merged[&#39;Cluster Labels&#39;]==1] . Area Neighborhood Area average price 2019 Latitude Longitude Cluster Labels 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 0 Toronto W06 | Alderwood | 1012359.0 | 43.601717 | -79.545232 | 1 | Pizza Place | Coffee Shop | Gym | Pub | Field | Fast Food Restaurant | Farmers Market | Filipino Restaurant | Falafel Restaurant | Dumpling Restaurant | . 6 Toronto E03 | Crescent Town | 1069340.0 | 43.695403 | -79.293099 | 1 | Convenience Store | Metro Station | Golf Course | Park | Women&#39;s Store | Factory | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 14 Toronto W06 | New Toronto | 1012359.0 | 43.600763 | -79.505264 | 1 | Mexican Restaurant | Pharmacy | Dessert Shop | Flower Shop | Café | Scenic Lookout | Fried Chicken Joint | Elementary School | Restaurant | Pub | . 18 Toronto E02 | East End-Danforth | 1316352.0 | 43.668440 | -79.330670 | 1 | Pizza Place | Park | Convenience Store | Indie Theater | Burger Joint | Skating Rink | Café | Egyptian Restaurant | Coffee Shop | Mexican Restaurant | . 34 Toronto C13 | Banbury-Don Mills | 1187598.0 | 43.752683 | -79.365270 | 1 | Park | Intersection | Gas Station | Japanese Restaurant | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | . 35 Toronto W06 | Mimico | 1012359.0 | 43.616677 | -79.496805 | 1 | Bar | Skating Rink | American Restaurant | Café | Bakery | Women&#39;s Store | Falafel Restaurant | Ethiopian Restaurant | Event Space | Factory | . 37 Toronto C15 | Hillcrest Village | 1193437.5 | 43.681695 | -79.425712 | 1 | Coffee Shop | Italian Restaurant | Café | Restaurant | Mexican Restaurant | Indian Restaurant | Burger Joint | Sushi Restaurant | Bakery | Juice Bar | . 42 Toronto C13 | Victoria Village | 1187598.0 | 43.732658 | -79.311189 | 1 | Spa | Park | Bus Line | Middle Eastern Restaurant | Thai Restaurant | Filipino Restaurant | Fish &amp; Chips Shop | Field | Fast Food Restaurant | Egyptian Restaurant | . 43 Toronto E03 | Broadview North | 1069340.0 | 43.683924 | -79.356964 | 1 | Theater | Bus Line | Other Great Outdoors | Grocery Store | Discount Store | Intersection | Coffee Shop | Ice Cream Shop | Park | Fast Food Restaurant | . 45 Toronto W02 | High Park North | 1252811.0 | 43.657383 | -79.470961 | 1 | Park | Baseball Field | Gym / Fitness Center | Women&#39;s Store | Falafel Restaurant | Elementary School | Ethiopian Restaurant | Event Space | Factory | Farmers Market | . 48 Toronto E03 | Danforth Village-East York | 1069340.0 | 43.683357 | -79.323574 | 1 | Coffee Shop | Café | American Restaurant | Breakfast Spot | Ethiopian Restaurant | Bar | Gastropub | Dance Studio | Burger Joint | Mexican Restaurant | . 53 Toronto E01 | North Riverdale | 1241262.0 | 43.665470 | -79.352594 | 1 | Vietnamese Restaurant | Chinese Restaurant | Bakery | Fast Food Restaurant | Bar | Grocery Store | Asian Restaurant | Bridal Shop | Café | French Restaurant | . 56 Toronto E02 | The Beaches | 1316352.0 | 43.671024 | -79.296712 | 1 | Beach | Breakfast Spot | Park | Bar | Thai Restaurant | Japanese Restaurant | Nail Salon | Pub | Pizza Place | Mobile Phone Shop | . 62 Toronto E01 | South Riverdale | 1241262.0 | 43.665470 | -79.352594 | 1 | Vietnamese Restaurant | Chinese Restaurant | Bakery | Fast Food Restaurant | Bar | Grocery Store | Asian Restaurant | Bridal Shop | Café | French Restaurant | . 64 Toronto W02 | Runnymede-Bloor West Village | 1252811.0 | 43.651778 | -79.475923 | 1 | Coffee Shop | Café | Bakery | Bank | Pizza Place | Falafel Restaurant | Frozen Yogurt Shop | Latin American Restaurant | Bookstore | Liquor Store | . 66 Toronto W02 | Dovercourt-Wallace Emerson-Junction | 1252811.0 | 43.667330 | -79.438106 | 1 | Park | Bakery | Italian Restaurant | Pharmacy | Pool | Coffee Shop | Music Venue | Middle Eastern Restaurant | Liquor Store | Bar | . 69 Toronto C07 | Newtonbrook West | 1263135.0 | 43.795986 | -79.413090 | 1 | Korean Restaurant | Thai Restaurant | Middle Eastern Restaurant | Greek Restaurant | Factory | Egyptian Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 71 Toronto C15 | Pleasant View | 1193437.5 | 43.787048 | -79.333714 | 1 | Pharmacy | Bakery | Italian Restaurant | Burger Joint | Park | Breakfast Spot | Fast Food Restaurant | Restaurant | Bank | Skating Rink | . 73 Toronto E03 | Playter Estates-Danforth | 1069340.0 | 43.678666 | -79.355518 | 1 | Greek Restaurant | Coffee Shop | Pub | Italian Restaurant | Spa | Café | Yoga Studio | Ice Cream Shop | Burger Joint | Bubble Tea Shop | . 75 Toronto E03 | Danforth | 1069340.0 | 43.686433 | -79.300355 | 1 | Pharmacy | Coffee Shop | Bus Line | Grocery Store | Sandwich Place | Fried Chicken Joint | French Restaurant | Skating Rink | Metro Station | Mexican Restaurant | . 76 Toronto E03 | East York | 1069340.0 | 43.699971 | -79.332520 | 1 | Park | Liquor Store | Pastry Shop | Plaza | Restaurant | Intersection | Pub | Women&#39;s Store | Egyptian Restaurant | Electronics Store | . 77 Toronto W06 | Long Branch | 1012359.0 | 43.592005 | -79.545365 | 1 | South American Restaurant | Seafood Restaurant | Bar | Café | Light Rail Station | Trail | Liquor Store | Burrito Place | Burger Joint | Park | . 81 Toronto C15 | Don Valley Village | 1193437.5 | 43.792673 | -79.354722 | 1 | Sandwich Place | Coffee Shop | Bank | Pharmacy | Pizza Place | Park | Grocery Store | Ethiopian Restaurant | Eastern European Restaurant | Egyptian Restaurant | . 82 Toronto C15 | Bayview Woods-Steeles | 1193437.5 | 43.798127 | -79.382973 | 1 | Dog Run | Women&#39;s Store | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | Farmers Market | Eastern European Restaurant | . 83 Toronto W02 | Junction Area | 1252811.0 | 43.665478 | -79.470352 | 1 | Italian Restaurant | Bakery | Café | Thai Restaurant | Bar | Coffee Shop | Fast Food Restaurant | Mexican Restaurant | Grocery Store | Antique Shop | . 97 Toronto W08 | Kingsway South | 1184223.0 | 43.647381 | -79.511333 | 1 | Coffee Shop | Italian Restaurant | Breakfast Spot | Sushi Restaurant | Bank | Pub | Dessert Shop | Grocery Store | Greek Restaurant | French Restaurant | . 99 Toronto W08 | Islington-City Centre West | 1184223.0 | 43.645335 | -79.524816 | 1 | Coffee Shop | Fast Food Restaurant | Pub | Sandwich Place | Bakery | Pizza Place | Gluten-free Restaurant | Sushi Restaurant | Restaurant | Caribbean Restaurant | . 100 Toronto C15 | Bayview Village | 1193437.5 | 43.769197 | -79.376662 | 1 | Bank | Pet Store | Fish Market | Persian Restaurant | Breakfast Spot | Fast Food Restaurant | Sporting Goods Shop | Sandwich Place | Gas Station | Bubble Tea Shop | . 103 Toronto C07 | Willowdale West | 1263135.0 | 43.761510 | -79.410923 | 1 | Coffee Shop | Grocery Store | Japanese Restaurant | Sandwich Place | Burger Joint | Gym | Restaurant | Gas Station | Korean Restaurant | Fried Chicken Joint | . 104 Toronto W07 | Stonegate-Queensway | 1225390.0 | 43.621950 | -79.523499 | 1 | Bank | Burrito Place | Italian Restaurant | Buffet | Mattress Store | Middle Eastern Restaurant | Liquor Store | Sushi Restaurant | Restaurant | Eastern European Restaurant | . 105 Toronto W08 | Edenbridge-Humber Valley | 1184223.0 | 43.670672 | -79.518855 | 1 | Garden | Park | Women&#39;s Store | Farmers Market | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Fast Food Restaurant | . 110 Toronto W08 | Etobicoke West Mall | 1184223.0 | 43.643549 | -79.565325 | 1 | Restaurant | Intersection | Breakfast Spot | Farmers Market | Café | Bank | Clothing Store | Grocery Store | Coffee Shop | Mexican Restaurant | . 111 Toronto W08 | Markland Wood | 1184223.0 | 43.631239 | -79.585434 | 1 | Piano Bar | Golf Course | Baseball Field | Park | Factory | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Falafel Restaurant | . 115 Toronto C06 | Bathurst Manor | 1089948.0 | 43.665519 | -79.411937 | 1 | Korean Restaurant | Grocery Store | Coffee Shop | Eastern European Restaurant | Video Store | Ice Cream Shop | Café | Bar | Bakery | Mexican Restaurant | . 117 Toronto C15 | Henry Farm | 1193437.5 | 43.769509 | -79.354296 | 1 | Women&#39;s Store | Park | Intersection | Tennis Court | Fish Market | Fish &amp; Chips Shop | Filipino Restaurant | Flea Market | Field | Fast Food Restaurant | . 118 Toronto C07 | Lansing-Westgate | 1263135.0 | 43.758950 | -79.422556 | 1 | Electronics Store | Business Service | Health &amp; Beauty Service | Farmers Market | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Women&#39;s Store | . 122 Toronto C06 | Clanton Park | 1089948.0 | 43.744124 | -79.447146 | 1 | IT Services | Park | Women&#39;s Store | Farmers Market | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | . 124 Toronto E03 | O&#39;Connor-Parkview | 1069340.0 | 43.702390 | -79.316098 | 1 | Pharmacy | Pizza Place | Intersection | Gastropub | Bank | Flea Market | Dance Studio | Deli / Bodega | Fish Market | Fish &amp; Chips Shop | . toronto_merged.loc[toronto_merged[&#39;Cluster Labels&#39;]==2] . Area Neighborhood Area average price 2019 Latitude Longitude Cluster Labels 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 1 Toronto C08 | Moss Park | 1509796.0 | 43.654644 | -79.369728 | 2 | Coffee Shop | Furniture / Home Store | Café | Italian Restaurant | Sandwich Place | Grocery Store | Diner | Food &amp; Drink Shop | Sushi Restaurant | Karaoke Bar | . 3 Toronto C10 | Mount Pleasant East | 1594740.0 | 43.708417 | -79.390135 | 2 | Dessert Shop | Coffee Shop | Pizza Place | Sandwich Place | Sushi Restaurant | Gym | Italian Restaurant | Café | Brewery | Supermarket | . 7 Toronto C04 | Lawrence Park North | 1819957.0 | 43.729199 | -79.403252 | 2 | Sushi Restaurant | Italian Restaurant | Bakery | Coffee Shop | Pub | Bank | Pharmacy | Asian Restaurant | Fast Food Restaurant | Cosmetics Shop | . 8 Toronto C03 | Oakwood-Vaughan | 1672260.0 | 43.682857 | -79.419540 | 2 | Ice Cream Shop | Coffee Shop | Pizza Place | Yoga Studio | Portuguese Restaurant | Sushi Restaurant | Frozen Yogurt Shop | Latin American Restaurant | Caribbean Restaurant | Food &amp; Drink Shop | . 11 Toronto C01 | Trinity-Bellwoods | 1648312.0 | 43.645482 | -79.413249 | 2 | Men&#39;s Store | Coffee Shop | Yoga Studio | Park | Diner | Café | Middle Eastern Restaurant | Boutique | Bar | Deli / Bodega | . 12 Toronto C03 | Yonge-Eglinton | 1672260.0 | 43.706748 | -79.398327 | 2 | Coffee Shop | Italian Restaurant | Pub | Gym | Bookstore | Bakery | Movie Theater | Middle Eastern Restaurant | Grocery Store | Restaurant | . 13 Toronto C01 | Palmerston-Little Italy | 1648312.0 | 43.660065 | -79.411806 | 2 | Café | Park | Indie Theater | Salon / Barbershop | French Restaurant | Furniture / Home Store | Cheese Shop | Donut Shop | Taco Place | Juice Bar | . 21 Toronto C01 | Little Portugal | 1648312.0 | 43.647413 | -79.431116 | 2 | Bar | Café | Coffee Shop | Bakery | Cocktail Bar | Restaurant | Korean Restaurant | Sandwich Place | Breakfast Spot | French Restaurant | . 23 Toronto W01 | Roncesvalles | 1526647.0 | 43.651443 | -79.451038 | 2 | Café | Bookstore | Restaurant | Breakfast Spot | Gift Shop | Gourmet Shop | Bakery | Brewery | Bar | Sandwich Place | . 31 Toronto C10 | Mount Pleasant West | 1594740.0 | 43.708417 | -79.390135 | 2 | Dessert Shop | Coffee Shop | Pizza Place | Sandwich Place | Sushi Restaurant | Gym | Italian Restaurant | Café | Brewery | Supermarket | . 38 Toronto C01 | Dufferin Grove | 1648312.0 | 43.653632 | -79.426439 | 2 | Coffee Shop | Bar | Restaurant | Italian Restaurant | Sports Bar | Portuguese Restaurant | Café | Mexican Restaurant | Candy Store | Bookstore | . 61 Toronto W01 | High Park-Swansea | 1526647.0 | 43.638093 | -79.466584 | 2 | Park | Gym / Fitness Center | Light Rail Station | Bus Stop | Gas Station | Beach | Trail | Lake | Building | American Restaurant | . 67 Toronto C11 | Leaside | 1694183.0 | 43.704798 | -79.368090 | 2 | Home Service | Japanese Restaurant | Convenience Store | Sandwich Place | Park | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | . 70 Toronto C04 | Lawrence Park South | 1819957.0 | 43.729199 | -79.403252 | 2 | Sushi Restaurant | Italian Restaurant | Bakery | Coffee Shop | Pub | Bank | Pharmacy | Asian Restaurant | Fast Food Restaurant | Cosmetics Shop | . 78 Toronto C03 | Humewood-Cedarvale | 1672260.0 | 43.688322 | -79.428080 | 2 | Convenience Store | Trail | Field | Hockey Arena | African Restaurant | Food &amp; Drink Shop | Flower Shop | Flea Market | Fish Market | Fish &amp; Chips Shop | . 85 Toronto C01 | University | 1648312.0 | 43.656119 | -79.384670 | 2 | Coffee Shop | Clothing Store | Middle Eastern Restaurant | Sandwich Place | Cosmetics Shop | Café | Bubble Tea Shop | Diner | Hotel | Pizza Place | . 90 Toronto C08 | Cabbagetown-South St. James Town | 1509796.0 | 43.666847 | -79.369179 | 2 | Coffee Shop | Café | Restaurant | Pizza Place | Diner | Bakery | Japanese Restaurant | Italian Restaurant | Pub | Gastropub | . 94 Toronto C08 | Church-Yonge Corridor | 1509796.0 | 43.671877 | -79.386666 | 2 | Café | Italian Restaurant | Coffee Shop | Indian Restaurant | Sushi Restaurant | Spa | Boutique | French Restaurant | Gourmet Shop | Japanese Restaurant | . 95 Toronto C03 | Forest Hill South | 1672260.0 | 43.693559 | -79.413902 | 2 | Bank | Playground | Park | Business Service | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | . 96 Toronto C04 | Forest Hill North | 1819957.0 | 43.693559 | -79.413902 | 2 | Bank | Playground | Park | Business Service | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | . 98 Toronto C10 | Flemingdon Park | 1594740.0 | 43.718432 | -79.333204 | 2 | Coffee Shop | Pharmacy | Gym | Bus Line | Movie Theater | Science Museum | Office | Japanese Restaurant | Grocery Store | Fast Food Restaurant | . 102 Toronto C08 | Regent Park | 1509796.0 | 43.660706 | -79.360457 | 2 | Coffee Shop | Restaurant | Thai Restaurant | Park | Electronics Store | Pub | Fast Food Restaurant | Food Truck | Pool | Beer Store | . 107 Toronto C04 | Englemount-Lawrence | 1819957.0 | 43.711594 | -79.436001 | 2 | Tennis Court | Metro Station | Shopping Mall | Coffee Shop | Shoe Store | Bakery | Factory | Electronics Store | Elementary School | Ethiopian Restaurant | . 108 Toronto C14 | Newtonbrook East | 1529290.0 | 43.795986 | -79.413090 | 2 | Korean Restaurant | Thai Restaurant | Middle Eastern Restaurant | Greek Restaurant | Factory | Egyptian Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 112 Toronto W01 | South Parkdale | 1526647.0 | 43.638093 | -79.466584 | 2 | Park | Gym / Fitness Center | Light Rail Station | Bus Stop | Gas Station | Beach | Trail | Lake | Building | American Restaurant | . 113 Toronto C14 | Willowdale East | 1529290.0 | 43.761510 | -79.410923 | 2 | Coffee Shop | Grocery Store | Japanese Restaurant | Sandwich Place | Burger Joint | Gym | Restaurant | Gas Station | Korean Restaurant | Fried Chicken Joint | . 114 Toronto C01 | Niagara | 1648312.0 | 43.644075 | -79.408698 | 2 | Yoga Studio | Dessert Shop | Pizza Place | Bakery | Burger Joint | Middle Eastern Restaurant | Café | Spa | Ramen Restaurant | Salad Place | . 139 Toronto C08 | North St. James Town | 1509796.0 | 43.669403 | -79.372704 | 2 | Coffee Shop | Café | Pizza Place | Grocery Store | Bakery | Filipino Restaurant | Food &amp; Drink Shop | Caribbean Restaurant | Breakfast Spot | Chinese Restaurant | . toronto_merged.loc[toronto_merged[&#39;Cluster Labels&#39;]==3] . Area Neighborhood Area average price 2019 Latitude Longitude Cluster Labels 1st Most Common Venue 2nd Most Common Venue 3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue 6th Most Common Venue 7th Most Common Venue 8th Most Common Venue 9th Most Common Venue 10th Most Common Venue . 10 Toronto E10 | West Hill | 790226.0 | 43.768914 | -79.187291 | 3 | Pizza Place | Bank | Pharmacy | Fast Food Restaurant | Breakfast Spot | Restaurant | Electronics Store | Supermarket | Beer Store | Fried Chicken Joint | . 17 Toronto E11 | Rouge E11 | 722209.0 | 43.804930 | -79.165837 | 3 | Caribbean Restaurant | Park | Fast Food Restaurant | Fish Market | Fish &amp; Chips Shop | Filipino Restaurant | Field | Flea Market | Eastern European Restaurant | Farmers Market | . 20 Toronto W05 | York University Heights | 828052.0 | 43.758781 | -79.519434 | 3 | Grocery Store | Fast Food Restaurant | Pizza Place | Discount Store | Coffee Shop | Gas Station | Beer Store | Sandwich Place | Liquor Store | Fried Chicken Joint | . 24 Toronto W05 | Humber Summit | 828052.0 | 43.760078 | -79.571760 | 3 | Construction &amp; Landscaping | Restaurant | Park | Bakery | Women&#39;s Store | Factory | Egyptian Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | . 26 Toronto E04 | Kennedy Park | 761729.0 | 43.724878 | -79.253969 | 3 | Fast Food Restaurant | Chinese Restaurant | Grocery Store | Asian Restaurant | Women&#39;s Store | Factory | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 27 Toronto E11 | Malvern | 722209.0 | 43.809196 | -79.221701 | 3 | Fast Food Restaurant | Pharmacy | Pizza Place | Restaurant | Grocery Store | Skating Rink | Supermarket | Sandwich Place | Bubble Tea Shop | Park | . 28 Toronto W03 | Keelesdale-Eglinton West | 843633.0 | 43.690158 | -79.474998 | 3 | Turkish Restaurant | Sandwich Place | Skating Rink | Discount Store | Falafel Restaurant | Elementary School | Ethiopian Restaurant | Event Space | Factory | Women&#39;s Store | . 32 Toronto W05 | Glenfield-Jane Heights | 828052.0 | 43.724373 | -79.458398 | 3 | Clothing Store | Dessert Shop | Restaurant | American Restaurant | Men&#39;s Store | Women&#39;s Store | Shopping Mall | Seafood Restaurant | Cheese Shop | Chocolate Shop | . 40 Toronto E09 | Bendale | 727426.0 | 43.753520 | -79.255336 | 3 | Dog Run | Optical Shop | Fast Food Restaurant | Grocery Store | Tennis Court | Discount Store | Women&#39;s Store | Event Space | Electronics Store | Elementary School | . 41 Toronto W03 | Corso Italia-Davenport | 843633.0 | 43.677954 | -79.443083 | 3 | Italian Restaurant | Breakfast Spot | Coffee Shop | Sushi Restaurant | Pet Store | Café | Sandwich Place | Mexican Restaurant | Mediterranean Restaurant | Martial Arts School | . 44 Toronto E06 | Oakridge | 857438.0 | 43.697174 | -79.274823 | 3 | Convenience Store | Ice Cream Shop | Park | Restaurant | Dessert Shop | Bus Stop | Women&#39;s Store | Falafel Restaurant | Elementary School | Ethiopian Restaurant | . 50 Toronto W05 | Black Creek | 828052.0 | 43.695400 | -79.485495 | 3 | Home Service | Playground | Construction &amp; Landscaping | Café | Coffee Shop | Women&#39;s Store | Falafel Restaurant | Elementary School | Ethiopian Restaurant | Event Space | . 52 Toronto E10 | Rouge E10 | 790226.0 | 43.804930 | -79.165837 | 3 | Caribbean Restaurant | Park | Fast Food Restaurant | Fish Market | Fish &amp; Chips Shop | Filipino Restaurant | Field | Flea Market | Eastern European Restaurant | Farmers Market | . 55 Toronto W04 | Mount Dennis | 850365.0 | 43.686960 | -79.489551 | 3 | Furniture / Home Store | Coffee Shop | Pizza Place | Bus Line | Grocery Store | Tennis Court | Farmers Market | Fast Food Restaurant | Field | Eastern European Restaurant | . 60 Toronto E04 | Ionview | 761729.0 | 43.735990 | -79.276515 | 3 | Metro Station | Deli / Bodega | Park | Farmers Market | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Field | . 65 Toronto W10 | West Humber-Clairville | 739999.0 | 43.723370 | -79.597457 | 3 | Sandwich Place | Department Store | Bus Station | Coffee Shop | Restaurant | Theme Park | Chinese Restaurant | Grocery Store | Sporting Goods Shop | Bank | . 68 Toronto E05 | Tam O&#39;Shanter-Sullivan | 884020.0 | 43.779883 | -79.305538 | 3 | Thai Restaurant | Gas Station | Park | Fast Food Restaurant | Shopping Mall | Noodle House | Sandwich Place | Bank | Italian Restaurant | Elementary School | . 72 Toronto E07 | Agincourt North | 831826.0 | 43.808038 | -79.266439 | 3 | Bank | Chinese Restaurant | Coffee Shop | Fast Food Restaurant | Sandwich Place | Liquor Store | Spa | Movie Theater | Fried Chicken Joint | Frozen Yogurt Shop | . 74 Toronto W10 | Thistletown-Beaumonde Heights | 739999.0 | 43.743414 | -79.568701 | 3 | Park | Bakery | Skating Rink | Falafel Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | Women&#39;s Store | . 79 Toronto E10 | Centennial Scarborough | 790226.0 | 43.787491 | -79.150768 | 3 | Bar | Park | Women&#39;s Store | Farmers Market | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Fast Food Restaurant | . 80 Toronto E04 | Dorset Park | 761729.0 | 43.752847 | -79.282067 | 3 | Bakery | Coffee Shop | Accessories Store | Indian Restaurant | Beer Store | Bowling Alley | Chinese Restaurant | Fast Food Restaurant | Asian Restaurant | Ethiopian Restaurant | . 84 Toronto E09 | Woburn | 727426.0 | 43.759824 | -79.225291 | 3 | Fast Food Restaurant | Coffee Shop | Discount Store | Gym | Bank | Beer Store | Big Box Store | Sandwich Place | Toy / Game Store | Department Store | . 87 Toronto E07 | Milliken | 831826.0 | 43.823174 | -79.301763 | 3 | Chinese Restaurant | Bakery | Asian Restaurant | Vietnamese Restaurant | BBQ Joint | Japanese Restaurant | Intersection | Bubble Tea Shop | Hong Kong Restaurant | Korean Restaurant | . 88 Toronto E05 | L&#39;Amoreaux | 884020.0 | 43.799003 | -79.305967 | 3 | Chinese Restaurant | Coffee Shop | Shopping Mall | Athletics &amp; Sports | Caribbean Restaurant | Bus Stop | Falafel Restaurant | Elementary School | Ethiopian Restaurant | Event Space | . 91 Toronto W04 | Maple Leaf | 850365.0 | 43.712277 | -79.490198 | 3 | Bakery | Basketball Court | Farmers Market | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Women&#39;s Store | Electronics Store | . 92 Toronto E08 | Guildwood | 808092.0 | 43.755225 | -79.198229 | 3 | Train Station | Baseball Field | Storage Facility | Women&#39;s Store | Falafel Restaurant | Elementary School | Ethiopian Restaurant | Event Space | Factory | Farmers Market | . 93 Toronto W04 | Rustic | 850365.0 | 43.713366 | -79.504504 | 3 | Pizza Place | Gas Station | Fast Food Restaurant | Bus Stop | Caribbean Restaurant | Deli / Bodega | Elementary School | Fish Market | Fish &amp; Chips Shop | Filipino Restaurant | . 121 Toronto W09 | Humber Heights | 902203.0 | 43.698179 | -79.523277 | 3 | Breakfast Spot | Gas Station | Diner | Skating Rink | Fried Chicken Joint | Pharmacy | Health &amp; Beauty Service | Dumpling Restaurant | Filipino Restaurant | Field | . 123 Toronto W04 | Yorkdale-Glen Park | 850365.0 | 43.703434 | -79.452918 | 3 | Mediterranean Restaurant | Argentinian Restaurant | Bank | Gas Station | Sandwich Place | Bike Shop | Clothing Store | Gym / Fitness Center | Italian Restaurant | Paintball Field | . 126 Toronto E08 | Cliffcrest | 808092.0 | 43.721836 | -79.236214 | 3 | Ice Cream Shop | Pizza Place | Restaurant | Hardware Store | Women&#39;s Store | Factory | Egyptian Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | . 128 Toronto E08 | Scarborough Village | 808092.0 | 43.743742 | -79.211632 | 3 | Coffee Shop | Pharmacy | Pub | Chinese Restaurant | Fast Food Restaurant | Supermarket | Discount Store | Gym | Electronics Store | Elementary School | . 129 Toronto E08 | Eglinton East | 808092.0 | 43.739465 | -79.232100 | 3 | Ice Cream Shop | Restaurant | Train Station | Sandwich Place | Indian Restaurant | Egyptian Restaurant | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 130 Toronto E05 | Steeles | 884020.0 | 43.816178 | -79.314538 | 3 | Playground | Women&#39;s Store | Farmers Market | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Fast Food Restaurant | . 131 Toronto W10 | Rexdale-Kipling | 739999.0 | 43.722114 | -79.572292 | 3 | Spa | Pizza Place | Sandwich Place | Fast Food Restaurant | Department Store | Factory | Electronics Store | Elementary School | Ethiopian Restaurant | Event Space | . 133 Toronto E10 | Highland Creek | 790226.0 | 43.790117 | -79.173334 | 3 | IT Services | Women&#39;s Store | Fast Food Restaurant | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | Farmers Market | Field | . 134 Toronto E09 | Morningside | 727426.0 | 43.782601 | -79.204958 | 3 | Park | Coffee Shop | Convenience Store | Beer Store | Discount Store | Sandwich Place | Café | Mobile Phone Shop | Fast Food Restaurant | Supermarket | . 135 Toronto W10 | Elms-Old Rexdale | 739999.0 | 43.721770 | -79.552173 | 3 | Caribbean Restaurant | Hakka Restaurant | Bar | African Restaurant | Mobile Phone Shop | Elementary School | Ethiopian Restaurant | Event Space | Factory | Falafel Restaurant | . 138 Toronto W04 | Weston | 850365.0 | 43.700161 | -79.516247 | 3 | Train Station | Soccer Field | Laundromat | Convenience Store | Pharmacy | Pizza Place | Coffee Shop | Diner | Discount Store | Restaurant | . toronto_info=toronto_merged.groupby(by=&#39;Cluster Labels&#39;).mean() . toronto_merged.groupby(by=&#39;Cluster Labels&#39;).size() . Cluster Labels 0 6 1 38 2 28 3 38 dtype: int64 . round(toronto_info[&#39;Area average price 2019&#39;]) . Cluster Labels 0 2300120.0 1 1166129.0 2 1625880.0 3 805047.0 Name: Area average price 2019, dtype: float64 . Conclusion . . We have grouped toronto&#39;s neighbourhood in 4 clusters. Here are some results that we found after clustering: . On average cost. . The first cluster&#39;s average cost of 2300120.0 | The second cluster&#39;s average cost of 808301.0 | The third cluster&#39;s average cost of 1631649.0 | The fourth cluster&#39;s average cost of 1171028.0 | The conclusion would be the first cluster is the most expensive neighbourhood and second is least expensive third and fourth are moderately expensive . The neighborhood is: . First cluster&#39;s nearby venues consist of restaurant and grocery shops | Second cluster&#39;s nearby venues consist of all types of restaurant and basic amneties. It looks a great neighbourhood to live as the cost is also low | Third Cluster&#39;s nearby venues consist of pubs, restaurant, parks, entertainment and leisure places | Fourth Cluster&#39;s nearby venues consist of Parks, restaurant, Coffee shops, Banks | The conclusion I got from the above result is the first cluster is the most expensive one. It consist of restaurant and different types of shops and musuem. But this cluster only has six neighborhoods and by analyzing the map we find that it is in the epicentre of the city The second cluster is the least expensive one and it has restaurant and basic amneties around which could be a great place for people having families By analyzing the map we could know that these neighborhoods surround the epicentre of the city. The third cluster is all around the city and it is a second most expensive neighborhood. It consist of all the leisure centre and entertainment places hence would be suitable for bachelors. It may also be suitable for opening new stores. The fourth cluster is away from the epicentre of the city and it also a second least expensive place. It has Parks, restaurant and coffee shops all around it. . from IPython.display import HTML, IFrame IFrame(src=&#39;./map1.html&#39;, width=500, height=500) .",
            "url": "https://bilalhaider10.github.io/firstBlog/2020/01/29/Final.html",
            "relUrl": "/2020/01/29/Final.html",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bilalhaider10.github.io/firstBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bilalhaider10.github.io/firstBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bilalhaider10.github.io/firstBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}